name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths: 
      - 'madplan-backend/**'
      - '.github/workflows/backend-ci-cd.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'madplan-backend/**'
      - '.github/workflows/backend-ci-cd.yml'
  release:
    types: [ published ]

env:
  NODE_VERSION: '20'
  BACKEND_DIR: './madplan-backend'

jobs:
  test:
    name: Test and Quality Checks
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.BACKEND_DIR }}
    
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongosh
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.BACKEND_DIR }}/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type check
        run: npm run build

      - name: Run unit tests
        env:
          NODE_ENV: test
          JWT_SECRET: test-secret
          MONGODB_URI: mongodb://root:password@localhost:27017/madplan-test?authSource=admin
          REDIS_URL: redis://localhost:6379
        run: npm run test:cov

      - name: Run integration tests
        env:
          NODE_ENV: test
          JWT_SECRET: test-secret
          MONGODB_URI: mongodb://root:password@localhost:27017/madplan-test?authSource=admin
          REDIS_URL: redis://localhost:6379
        run: npm run test:integration

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ${{ env.BACKEND_DIR }}/coverage/lcov.info
          flags: backend
          name: backend-coverage

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.BACKEND_DIR }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.BACKEND_DIR }}/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Run Snyk security scan
        if: github.event_name != 'pull_request'
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium
          command: test

      - name: OWASP ZAP security scan
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'https://grr-agents.onrender.com'

  build:
    name: Build and Docker
    runs-on: ubuntu-latest
    needs: [test, security-audit]
    defaults:
      run:
        working-directory: ${{ env.BACKEND_DIR }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.BACKEND_DIR }}/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build-${{ github.sha }}
          path: ${{ env.BACKEND_DIR }}/dist/
          retention-days: 7

      - name: Set up Docker Buildx
        if: github.event_name != 'pull_request'
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.BACKEND_DIR }}
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/madplan-backend:latest
            ghcr.io/${{ github.repository }}/madplan-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, security-audit, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    defaults:
      run:
        working-directory: ${{ env.BACKEND_DIR }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.BACKEND_DIR }}/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Build for staging
        run: npm run build

      - name: Run database migrations
        env:
          NODE_ENV: staging
          MONGODB_URI: ${{ secrets.MONGODB_URI_STAGING }}
          JWT_SECRET: ${{ secrets.JWT_SECRET_STAGING }}
        run: |
          echo "Running database migrations for staging..."
          npm run migration:run

      - name: Deploy to Render (Staging)
        env:
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID_STAGING }}
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          echo "Triggering Render staging deployment..."
          curl -X POST "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json"

      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to complete..."
          sleep 60

      - name: Health check staging
        env:
          STAGING_URL: ${{ secrets.STAGING_URL || 'https://grr-agents-staging.onrender.com' }}
        run: |
          echo "Performing health check on staging environment..."
          for i in {1..10}; do
            if curl -f "$STAGING_URL/api/health"; then
              echo "✅ Staging deployment health check passed"
              break
            fi
            if [ $i -eq 10 ]; then
              echo "❌ Staging deployment health check failed"
              exit 1
            fi
            echo "Attempt $i failed, retrying in 15 seconds..."
            sleep 15
          done

      - name: Run smoke tests
        env:
          STAGING_URL: ${{ secrets.STAGING_URL || 'https://grr-agents-staging.onrender.com' }}
        run: |
          echo "Running smoke tests against staging environment..."
          npm run test:smoke -- --baseUrl="$STAGING_URL"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security-audit, build]
    if: github.event_name == 'release'
    environment: production
    defaults:
      run:
        working-directory: ${{ env.BACKEND_DIR }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract release version
        id: extract_version
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "Deploying version: ${GITHUB_REF#refs/tags/}"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.BACKEND_DIR }}/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build

      - name: Blue-Green deployment preparation
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL || 'https://grr-agents.onrender.com' }}
        run: |
          echo "🔵 Preparing blue-green deployment for version ${{ steps.extract_version.outputs.RELEASE_VERSION }}"
          echo "Current production health check:"
          curl -f "$PRODUCTION_URL/api/health" || echo "Production service unavailable"

      - name: Run database migrations (Production)
        env:
          NODE_ENV: production
          MONGODB_URI: ${{ secrets.MONGODB_URI_PRODUCTION }}
          JWT_SECRET: ${{ secrets.JWT_SECRET_PRODUCTION }}
        run: |
          echo "Running database migrations for production..."
          npm run migration:run

      - name: Deploy to Render (Production)
        env:
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID_PRODUCTION }}
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          echo "🚀 Triggering production deployment for version ${{ steps.extract_version.outputs.RELEASE_VERSION }}"
          curl -X POST "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "clearCache": false,
              "imagePath": "ghcr.io/${{ github.repository }}/madplan-backend:${{ github.sha }}"
            }'

      - name: Monitor deployment
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL || 'https://grr-agents.onrender.com' }}
        run: |
          echo "🟢 Monitoring green environment deployment..."
          for i in {1..20}; do
            if curl -f "$PRODUCTION_URL/api/health" --max-time 30; then
              echo "✅ Production deployment health check passed (attempt $i)"
              break
            fi
            if [ $i -eq 20 ]; then
              echo "❌ Production deployment failed after 20 attempts"
              exit 1
            fi
            echo "Attempt $i failed, retrying in 30 seconds..."
            sleep 30
          done

      - name: Verify production deployment
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL || 'https://grr-agents.onrender.com' }}
        run: |
          echo "🔍 Verifying production deployment..."
          
          # Health check
          if ! curl -f "$PRODUCTION_URL/api/health" --max-time 30; then
            echo "❌ Production health check failed"
            exit 1
          fi
          
          # GraphQL endpoint check
          if ! curl -f "$PRODUCTION_URL/graphql" --max-time 30 -H "Content-Type: application/json" -d '{"query":"query { __typename }"}'; then
            echo "❌ GraphQL endpoint check failed"
            exit 1
          fi
          
          echo "✅ All production verification checks passed"

      - name: Run production smoke tests
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL || 'https://grr-agents.onrender.com' }}
        run: |
          echo "🧪 Running production smoke tests..."
          npm run test:smoke -- --baseUrl="$PRODUCTION_URL"

      - name: Create deployment record
        if: success()
        run: |
          echo "🎉 Production deployment completed successfully"
          echo "Version: ${{ steps.extract_version.outputs.RELEASE_VERSION }}"
          echo "Timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          echo "Commit SHA: ${{ github.sha }}"
          echo "Deployment URL: ${{ secrets.PRODUCTION_URL || 'https://grr-agents.onrender.com' }}"

      - name: Rollback on failure
        if: failure()
        env:
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID_PRODUCTION }}
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          echo "🔴 Production deployment failed, initiating rollback..."
          # In a real blue-green setup, this would switch traffic back to the previous version
          echo "Manual rollback required - check Render dashboard"
          
      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Production deployment successful for version ${{ steps.extract_version.outputs.RELEASE_VERSION }}"
          else
            echo "❌ Production deployment failed for version ${{ steps.extract_version.outputs.RELEASE_VERSION }}"
          fi