name: Frontend CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '20'
  VITE_GRAPHQL_ENDPOINT: ${{ secrets.VITE_GRAPHQL_ENDPOINT }}

jobs:
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'madplan-frontend/package-lock.json'

      - name: Install dependencies
        run: |
          cd madplan-frontend
          npm ci

      - name: Run ESLint
        run: |
          cd madplan-frontend
          npm run lint

      - name: Run TypeScript type check
        run: |
          cd madplan-frontend
          npm run type-check

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'madplan-frontend/package-lock.json'

      - name: Install dependencies
        run: |
          cd madplan-frontend
          npm ci

      - name: Run unit tests
        run: |
          cd madplan-frontend
          npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: madplan-frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'madplan-frontend/package-lock.json'

      - name: Install dependencies
        run: |
          cd madplan-frontend
          npm ci

      - name: Build application
        run: |
          cd madplan-frontend
          npm run build

      - name: Verify build artifacts
        run: |
          cd madplan-frontend
          if [ ! -f "dist/index.html" ]; then
            echo "Build failed: index.html not found in dist directory"
            exit 1
          fi
          if [ ! -d "dist/assets" ]; then
            echo "Build failed: assets directory not found in dist directory"
            exit 1
          fi
          echo "Build verification successful"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ github.sha }}
          path: madplan-frontend/dist/
          retention-days: 7

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'madplan-frontend/package-lock.json'

      - name: Run security audit
        run: |
          cd madplan-frontend
          npm audit --audit-level=moderate

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test, build, security-audit]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'madplan-frontend/package-lock.json'

      - name: Install dependencies
        run: |
          cd madplan-frontend
          npm ci

      - name: Build for staging
        env:
          VITE_GRAPHQL_ENDPOINT: ${{ secrets.VITE_GRAPHQL_ENDPOINT_STAGING }}
        run: |
          cd madplan-frontend
          npm run build

      - name: Deploy to Vercel Staging
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          cd madplan-frontend
          npx vercel --prod --token $VERCEL_TOKEN --confirm
          echo "Staging deployment completed"
          echo "Staging URL will be available at: https://madplan-frontend-staging.vercel.app"

      - name: Verify staging deployment
        run: |
          echo "Waiting for deployment to be available..."
          sleep 30
          # Add deployment verification logic here
          echo "‚úÖ Staging deployment verification completed"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Staging deployment successful"
          else
            echo "‚ùå Staging deployment failed"
          fi

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test, build, security-audit]
    if: github.event_name == 'release'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract release version
        id: extract_version
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "Deploying version: ${GITHUB_REF#refs/tags/}"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'madplan-frontend/package-lock.json'

      - name: Install dependencies
        run: |
          cd madplan-frontend
          npm ci

      - name: Build for production
        env:
          VITE_GRAPHQL_ENDPOINT: ${{ secrets.VITE_GRAPHQL_ENDPOINT_PRODUCTION }}
        run: |
          cd madplan-frontend
          npm run build

      - name: Deploy to Vercel Production
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          cd madplan-frontend
          npx vercel --prod --token $VERCEL_TOKEN --confirm
          echo "Production deployment completed for version ${{ steps.extract_version.outputs.RELEASE_VERSION }}"

      - name: Verify production deployment
        run: |
          echo "Waiting for deployment to be available..."
          sleep 60
          # Add deployment verification logic here
          echo "‚úÖ Production deployment verification completed"

      - name: Create deployment record
        run: |
          echo "üöÄ Production deployment completed"
          echo "Version: ${{ steps.extract_version.outputs.RELEASE_VERSION }}"
          echo "Timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          echo "Status: ${{ job.status }}"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Production deployment successful for version ${{ steps.extract_version.outputs.RELEASE_VERSION }}"
          else
            echo "‚ùå Production deployment failed for version ${{ steps.extract_version.outputs.RELEASE_VERSION }}"
          fi