name: MadPlan Monorepo CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '20'

jobs:
  # Backend Jobs
  backend-lint-and-typecheck:
    name: Backend - Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'madplan-backend/package-lock.json'

      - name: Install backend dependencies
        run: |
          cd madplan-backend
          npm ci

      - name: Run backend ESLint
        run: |
          cd madplan-backend
          npm run lint

      - name: Run backend TypeScript type check
        run: |
          cd madplan-backend
          npx tsc --noEmit

  backend-test:
    name: Backend - Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'madplan-backend/package-lock.json'

      - name: Install backend dependencies
        run: |
          cd madplan-backend
          npm ci

      - name: Run backend unit tests
        run: |
          cd madplan-backend
          npm test -- --coverage --watchAll=false --passWithNoTests

  backend-build:
    name: Backend - Build Verification
    runs-on: ubuntu-latest
    needs: [backend-lint-and-typecheck, backend-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'madplan-backend/package-lock.json'

      - name: Install backend dependencies
        run: |
          cd madplan-backend
          npm ci

      - name: Build backend application
        run: |
          cd madplan-backend
          npm run build

      - name: Verify backend build artifacts
        run: |
          cd madplan-backend
          if [ ! -f "dist/main.js" ]; then
            echo "Backend build failed: main.js not found in dist directory"
            exit 1
          fi
          echo "Backend build verification successful"

  # Frontend Jobs
  frontend-lint-and-typecheck:
    name: Frontend - Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'madplan-frontend/package-lock.json'

      - name: Install frontend dependencies
        run: |
          cd madplan-frontend
          npm ci

      - name: Run frontend ESLint
        run: |
          cd madplan-frontend
          npm run lint

      - name: Run frontend TypeScript type check
        run: |
          cd madplan-frontend
          npm run type-check

  frontend-test:
    name: Frontend - Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'madplan-frontend/package-lock.json'

      - name: Install frontend dependencies
        run: |
          cd madplan-frontend
          npm ci

      - name: Run frontend unit tests
        run: |
          cd madplan-frontend
          npm test -- --run

  frontend-build:
    name: Frontend - Build Verification
    runs-on: ubuntu-latest
    needs: [frontend-lint-and-typecheck, frontend-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'madplan-frontend/package-lock.json'

      - name: Install frontend dependencies
        run: |
          cd madplan-frontend
          npm ci

      - name: Build frontend application
        run: |
          cd madplan-frontend
          npm run build

      - name: Verify frontend build artifacts
        run: |
          cd madplan-frontend
          if [ ! -f "dist/index.html" ]; then
            echo "Frontend build failed: index.html not found in dist directory"
            exit 1
          fi
          echo "Frontend build verification successful"

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run backend security audit
        run: |
          cd madplan-backend
          npm audit --audit-level=moderate

      - name: Run frontend security audit
        run: |
          cd madplan-frontend
          npm audit --audit-level=moderate

  # Staging Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build, security-audit]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy backend to Render Staging
        run: |
          echo "Deploying backend to Render staging environment..."
          echo "Render will auto-deploy from main branch"
          echo "Backend staging URL: https://grr-agents.onrender.com"

      - name: Deploy frontend to Vercel Staging
        run: |
          echo "Deploying frontend to Vercel staging environment..."
          echo "Vercel will auto-deploy from main branch"
          echo "Frontend staging URL: https://madplan-frontend.vercel.app"

      - name: Verify staging deployments
        run: |
          echo "Waiting for deployments to complete..."
          sleep 60
          echo "Deployment verification would run here in actual implementation"

  # Production Deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build, security-audit]
    if: github.event_name == 'release'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract release version
        id: extract_version
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "Deploying version: ${GITHUB_REF#refs/tags/}"

      - name: Deploy to production
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          echo "Deploying version ${{ steps.extract_version.outputs.RELEASE_VERSION }} to production..."
          echo "Backend production URL: https://grr-agents.onrender.com"
          echo "Frontend production URL: https://madplan.vercel.app"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Production deployment successful for version ${{ steps.extract_version.outputs.RELEASE_VERSION }}"
          else
            echo "❌ Production deployment failed for version ${{ steps.extract_version.outputs.RELEASE_VERSION }}"
          fi