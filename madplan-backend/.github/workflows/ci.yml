name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '20'
  MONGODB_URI: ${{ secrets.MONGODB_URI }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}

jobs:
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'madplan-backend/package-lock.json'

      - name: Install dependencies
        run: |
          cd madplan-backend
          npm ci

      - name: Run ESLint
        run: |
          cd madplan-backend
          npm run lint

      - name: Run TypeScript type check
        run: |
          cd madplan-backend
          npx tsc --noEmit

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'madplan-backend/package-lock.json'

      - name: Install dependencies
        run: |
          cd madplan-backend
          npm ci

      - name: Run unit tests
        run: |
          cd madplan-backend
          npm test -- --coverage --watchAll=false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: madplan-backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'madplan-backend/package-lock.json'

      - name: Install dependencies
        run: |
          cd madplan-backend
          npm ci

      - name: Build application
        run: |
          cd madplan-backend
          npm run build

      - name: Verify build artifacts
        run: |
          cd madplan-backend
          if [ ! -f "dist/main.js" ]; then
            echo "Build failed: main.js not found in dist directory"
            exit 1
          fi
          echo "Build verification successful"

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'madplan-backend/package-lock.json'

      - name: Run security audit
        run: |
          cd madplan-backend
          npm audit --audit-level=moderate

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test, build, security-audit]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Render Staging
        run: |
          echo "Deploying backend to Render staging environment..."
          echo "Render will auto-deploy from main branch"
          echo "Staging URL will be available at: https://madplan-backend-staging.onrender.com"

      - name: Verify staging deployment
        run: |
          cd madplan-backend
          # Wait for deployment to complete
          sleep 60
          # Run deployment health check
          if [ -f "scripts/test-deployment.js" ]; then
            BACKEND_URL=https://madplan-backend-staging.onrender.com node scripts/test-deployment.js
          else
            echo "No deployment test script found, skipping health check"
          fi

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Staging deployment successful"
          else
            echo "‚ùå Staging deployment failed"
          fi

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test, build, security-audit]
    if: github.event_name == 'release'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract release version
        id: extract_version
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "Deploying version: ${GITHUB_REF#refs/tags/}"

      - name: Deploy to Render Production
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          echo "Deploying backend version ${{ steps.extract_version.outputs.RELEASE_VERSION }} to production..."
          echo "Render will auto-deploy from release tag"
          echo "Production URL: https://madplan-backend.onrender.com"

      - name: Verify production deployment
        run: |
          cd madplan-backend
          # Wait for deployment to complete
          sleep 120
          # Run deployment health check
          if [ -f "scripts/test-deployment.js" ]; then
            BACKEND_URL=https://madplan-backend.onrender.com node scripts/test-deployment.js
          else
            echo "No deployment test script found, skipping health check"
          fi

      - name: Create deployment record
        run: |
          echo "üöÄ Production deployment completed"
          echo "Version: ${{ steps.extract_version.outputs.RELEASE_VERSION }}"
          echo "Timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          echo "Status: ${{ job.status }}"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Production deployment successful for version ${{ steps.extract_version.outputs.RELEASE_VERSION }}"
          else
            echo "‚ùå Production deployment failed for version ${{ steps.extract_version.outputs.RELEASE_VERSION }}"
          fi